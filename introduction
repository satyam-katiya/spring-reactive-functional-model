


                                                            * Spring WebFlux ,Functional EndPoint
                                                            --------------------------------------


-> Lambda-based, lightweight, and functional programming model. You can think of this as a small library or a set of utilities that an application can use to
route and handle requests. The big difference with annotated controllers is that the application is in charge of request handling from start to finish versus
declaring intent through annotations and being called back.

-> If you are interested in a lightweight, functional web framework for use with Java 8 lambdas or Kotlin, you can use the Spring WebFlux functional web endpoints.
That can also be a good choice for smaller applications or micro-services with less complex requirements that can benefit from greater transparency and control.

-> The key expected benefit of reactive and non-blocking is the ability to scale with a small, fixed number of threads and less memory. That makes applications
more resilient under load, because they scale in a more predictable way. In order to observe those benefits, however, you need to have some latency (including
a mix of slow and unpredictable network I/O). That is where the reactive stack begins to show its strengths, and the differences can be dramatic.



Functional Endpoints:-
----------------------

* in this model an  HTTP request is handled with a HandlerFunction: a function that takes ServerRequest and returns a delayed ServerResponse , Mono<ServerResponse>

* Both the request as the response object have immutable contracts that offer JDK 8-friendly access to the HTTP request and response
